<?php

/**
 * Implementation of hook_permission()
 *
 */

function nypl_collections_permission() {
  return array(
    'administer nypl collections' => array(
      'title' => t('Administer nypl collections'),
      'description' => t('Perform administration tasks for nypl collections.'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 *
 */

function nypl_collections_menu() {

  $items['admin/config/collections'] = array(
    'title' => 'NYPL Collections Administration',
    'description' => '.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nypl_collections_admin_settings'),
    'access arguments' => array('administer nypl_collections'),
    'file' => 'nypl_collections.admin.inc',
  );

  $items['admin/collection/currate'] = array(
    'title' => 'Curate a new Collection',
    'description' => 'Curate a new Collection.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nypl_collections_form'),
    'access arguments' => array('administer nypl collections'),
    'file' => 'nypl_collections.admin.inc',
  );

  $items['collections/feed'] = array(
    'title' => 'NYPL Curated Collections Feed',
    'page callback' => 'nypl_collections_feed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_form()
 *
 */

function nypl_collections_form($form, &$form_state) {

  require_once('lib/Search.inc');

  $form['solr_search_query'] = array(
    '#title' => t('Query'),
    '#type' => 'textfield',
    '#ajax' => array(
      'wrapper'  => 'nypl-collections-form-results-wrapper',
      'callback' => 'nypl_collections_form_ajax'
    )
  );

  $form['results'] = array(
    '#prefix' => '<div id="some-form-results-wrapper">',
    '#suffix' => '</div>',
    '#weight' => 19, // Place at the bottom of the form.
  );

  if (isset($form_state['values']['solr_search_query'])) {
    $facets = array(
	    "topic_mtxt_s" => "Topics",
	    "namePart_mtxt_s" => "Names",
	    "rootCollection_rootCollectionUUID_s" => "Collections",
	    "geographic_mtxt_s" => "Places",
	    "genre_mtxt_s" => "Genres",
	    "form_mtxt_s" => "Forms",
	    "publisher_mtxt_s" => "Publishers",
	    "physicalLocation_mtxt_s" => "Library locations",
	    "typeOfResource_mtxt_s" => "Resource types",
	    "language_mtxt_s" => "Languages",
	    "title_uuid_s" => "Parent title"
    );

    $form['filter_search'] = array(
      '#title' => t('Filter'),
      '#type'  => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    foreach ($facets as $key => $value) {
      $form['filter_search'][strtolower($value)] = array(
        '#title' => t($value),
        '#type'  => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      ); 

      $form['filter_search'][strtolower($value)][$key] = array(
        '#type' => 'checkboxes',
        '#options' => _nypl_collections_build_facets($form_state['values']['solr_search_query'], $key),
      );
    }

    $search = SolrSearch($form_state['values']['solr_search_query']);
    $form['results']['#markup'] = _nypl_collections_format_docs($search->response->docs);
  }
  else {
    $form['results']['#markup'] = 'Begin your search.';
  }
  return $form;
}

function nypl_collections_form_ajax($form, &$form_state) {
  return $form['results'];
}

function _nypl_collections_build_facets($search, $field){
  $handle = SolrSearchFacets($search, $field);
  foreach ($handle->facet_counts->facet_fields as $facet) {
    var_dump($facet);
    $options[] = $facet->$field;
  }    
  return $options;
/*  if ($options) {
    return $options;    
  }
  else {
    array('No facets for this filter.');
    }*/
}


function _nypl_collections_format_docs($documents) {

  foreach($documents as $doc) {
    if ($doc->identifier_mtxt_s) {
      $identifiers = $doc->identifier_mtxt_s[0] . ', ' . $doc->identifier_mtxt_s[1];
    }
    else{
      $identifiers = $doc->identifier_mtxt_s[0];
    }
    $rows[] = array($identifiers, $doc->title_mtxt_s[0], $doc->physicalLocation_mtxt[1]);
  }

  $header = array('Identifier(s)', 'Title', 'Location');
  return theme('table', array('header' => $header, 'rows' => $rows));
}